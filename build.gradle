plugins {
    id 'application'
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.5.1'

    implementation 'org.springframework:spring-context:5.3.9'
    implementation 'org.springframework:spring-context-support:5.3.9'

    testImplementation 'org.springframework:spring-test:5.3.9'

    // SLF4J 적용
    // cf. SLF4J는 추상 로깅 프레임워크이기 때문에 단독으로는 로깅을 할 수가 없음.
    // 보통은 네이티브 구현체인 Logback이나 Log4J와 같은 구현체를 이용해서 사용.
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    implementation 'org.springframework:spring-oxm:5.3.9'

    // 자바 표준 어노테이션 관련 의존성 추가
    // cf. JSR 250으로 정의되어 있는 자바 표준 어노테이션을 사용해 빈 생명주기에 관여할 수 있다.
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // 자바 생태계에는 캐시를 다루는 다양한 라이브러리들이 있는데, 그 중 하나인 caffeine 라이브러리를 사용. (자바 8을 기반으로 개발된 고성능 캐시 라이브러리)
    implementation 'com.github.ben-manes.caffeine:caffeine:2.8.0'

    implementation 'javax.cache:cache-api:1.1.1'
    // AspectJ 런타임 라이브러리
    implementation 'org.aspectj:aspectjweaver:1.9.6'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
	options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

application {
    mainClassName = 'moviebuddy.MovieBuddyApplication'
}